// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  EventsListUserEventsResponse,
  EventsCreateEventData,
  EventsCreateEventResponse,
  EventsGetEventDetailsData,
  EventsGetEventDetailsResponse,
  EventsAddEventParticipantData,
  EventsAddEventParticipantResponse,
  EventsListEventParticipantsData,
  EventsListEventParticipantsResponse,
  EventsRemoveEventParticipantData,
  EventsRemoveEventParticipantResponse,
  EventsGetEventSpeechAnalysisData,
  EventsGetEventSpeechAnalysisResponse,
  ItemsReadItemsData,
  ItemsReadItemsResponse,
  ItemsCreateItemData,
  ItemsCreateItemResponse,
  ItemsReadItemData,
  ItemsReadItemResponse,
  ItemsUpdateItemData,
  ItemsUpdateItemResponse,
  ItemsDeleteItemData,
  ItemsDeleteItemResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginTestTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentResponse,
  PrivateCreateUserData,
  PrivateCreateUserResponse,
  SpeechesCreateSpeechData,
  SpeechesCreateSpeechResponse,
  SpeechesListEventSpeechesData,
  SpeechesListEventSpeechesResponse,
  SpeechesGetSpeechDetailsData,
  SpeechesGetSpeechDetailsResponse,
  SpeechesCreateSpeechVersionData,
  SpeechesCreateSpeechVersionResponse,
  SpeechesListSpeechVersionsData,
  SpeechesListSpeechVersionsResponse,
  SpeechesSetCurrentSpeechVersionData,
  SpeechesSetCurrentSpeechVersionResponse,
  UsersReadUsersData,
  UsersReadUsersResponse,
  UsersCreateUserData,
  UsersCreateUserResponse,
  UsersReadUserMeResponse,
  UsersDeleteUserMeResponse,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeResponse,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
  UsersReadUserByIdData,
  UsersReadUserByIdResponse,
  UsersUpdateUserData,
  UsersUpdateUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserResponse,
  UtilsTestEmailData,
  UtilsTestEmailResponse,
  UtilsHealthCheckResponse,
} from "./types.gen"

export class EventsService {
  /**
   * List User Events
   * List all events the current user is participating in.
   * @returns CoordinationEventPublic Successful Response
   * @throws ApiError
   */
  public static listUserEvents(): CancelablePromise<EventsListUserEventsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/events/",
    })
  }

  /**
   * Create Event
   * Create a new coordination event.
   * The current user will be set as the creator and an initial participant.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns CoordinationEventPublic Successful Response
   * @throws ApiError
   */
  public static createEvent(
    data: EventsCreateEventData,
  ): CancelablePromise<EventsCreateEventResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/events/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Event Details
   * Get details of a specific event. User must be a participant.
   * @param data The data for the request.
   * @param data.eventId
   * @returns CoordinationEventPublic Successful Response
   * @throws ApiError
   */
  public static getEventDetails(
    data: EventsGetEventDetailsData,
  ): CancelablePromise<EventsGetEventDetailsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/events/{event_id}",
      path: {
        event_id: data.eventId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Add Event Participant
   * Add a user to an event. Only the event creator can add participants.
   * @param data The data for the request.
   * @param data.eventId
   * @param data.requestBody
   * @returns EventParticipantPublic Successful Response
   * @throws ApiError
   */
  public static addEventParticipant(
    data: EventsAddEventParticipantData,
  ): CancelablePromise<EventsAddEventParticipantResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/events/{event_id}/participants",
      path: {
        event_id: data.eventId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * List Event Participants
   * List participants of an event. User must be a participant of the event.
   * @param data The data for the request.
   * @param data.eventId
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static listEventParticipants(
    data: EventsListEventParticipantsData,
  ): CancelablePromise<EventsListEventParticipantsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/events/{event_id}/participants",
      path: {
        event_id: data.eventId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Remove Event Participant
   * Remove a participant from an event.
   * Allowed if:
   * - Current user is the event creator.
   * - Current user is removing themselves.
   * @param data The data for the request.
   * @param data.eventId
   * @param data.userIdToRemove
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static removeEventParticipant(
    data: EventsRemoveEventParticipantData,
  ): CancelablePromise<EventsRemoveEventParticipantResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/events/{event_id}/participants/{user_id_to_remove}",
      path: {
        event_id: data.eventId,
        user_id_to_remove: data.userIdToRemove,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Event Speech Analysis
   * Perform analysis on speeches within an event and return personalized nudges
   * for the current user. User must be a participant of the event.
   * @param data The data for the request.
   * @param data.eventId
   * @returns PersonalizedNudgePublic Successful Response
   * @throws ApiError
   */
  public static getEventSpeechAnalysis(
    data: EventsGetEventSpeechAnalysisData,
  ): CancelablePromise<EventsGetEventSpeechAnalysisResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/events/{event_id}/speech-analysis",
      path: {
        event_id: data.eventId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class ItemsService {
  /**
   * Read Items
   * Retrieve items.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns ItemsPublic Successful Response
   * @throws ApiError
   */
  public static readItems(
    data: ItemsReadItemsData = {},
  ): CancelablePromise<ItemsReadItemsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/items/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Item
   * Create new item.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static createItem(
    data: ItemsCreateItemData,
  ): CancelablePromise<ItemsCreateItemResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/items/items/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Item
   * Get item by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static readItem(
    data: ItemsReadItemData,
  ): CancelablePromise<ItemsReadItemResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Item
   * Update an item.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static updateItem(
    data: ItemsUpdateItemData,
  ): CancelablePromise<ItemsUpdateItemResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/items/items/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Item
   * Delete an item.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteItem(
    data: ItemsDeleteItemData,
  ): CancelablePromise<ItemsDeleteItemResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/items/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login, get an access token for future requests
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData,
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Test Token
   * Test access token
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static testToken(): CancelablePromise<LoginTestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/test-token",
    })
  }

  /**
   * Recover Password
   * Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static recoverPassword(
    data: LoginRecoverPasswordData,
  ): CancelablePromise<LoginRecoverPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reset Password
   * Reset password
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static resetPassword(
    data: LoginResetPasswordData,
  ): CancelablePromise<LoginResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/reset-password/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Recover Password Html Content
   * HTML Content for Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns string Successful Response
   * @throws ApiError
   */
  public static recoverPasswordHtmlContent(
    data: LoginRecoverPasswordHtmlContentData,
  ): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery-html-content/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class PrivateService {
  /**
   * Create User
   * Create a new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: PrivateCreateUserData,
  ): CancelablePromise<PrivateCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/private/private/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class SpeechesService {
  /**
   * Create Speech
   * Create a new secret speech. The current user will be set as the creator.
   * An initial version of the speech is created with the provided draft.
   * User must be a participant of the specified event.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns SecretSpeechPublic Successful Response
   * @throws ApiError
   */
  public static createSpeech(
    data: SpeechesCreateSpeechData,
  ): CancelablePromise<SpeechesCreateSpeechResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/speeches/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * List Event Speeches
   * Get all speeches for a given event. User must be a participant of the event.
   * @param data The data for the request.
   * @param data.eventId
   * @returns SecretSpeechPublic Successful Response
   * @throws ApiError
   */
  public static listEventSpeeches(
    data: SpeechesListEventSpeechesData,
  ): CancelablePromise<SpeechesListEventSpeechesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/speeches/event/{event_id}",
      path: {
        event_id: data.eventId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Speech Details
   * Get a specific speech. User must have access to the event of this speech.
   * If the user is the creator of the speech, they might get more details
   * (e.g. draft of the current version - this needs handling in response shaping).
   * @param data The data for the request.
   * @param data.speechId
   * @returns SecretSpeechPublic Successful Response
   * @throws ApiError
   */
  public static getSpeechDetails(
    data: SpeechesGetSpeechDetailsData,
  ): CancelablePromise<SpeechesGetSpeechDetailsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/speeches/{speech_id}",
      path: {
        speech_id: data.speechId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Speech Version
   * Create a new version for a secret speech.
   * User must be the creator of the speech or a participant in the event (adjust as needed).
   * @param data The data for the request.
   * @param data.speechId
   * @param data.requestBody
   * @returns SecretSpeechVersionPublic Successful Response
   * @throws ApiError
   */
  public static createSpeechVersion(
    data: SpeechesCreateSpeechVersionData,
  ): CancelablePromise<SpeechesCreateSpeechVersionResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/speeches/{speech_id}/versions",
      path: {
        speech_id: data.speechId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * List Speech Versions
   * List all versions of a speech.
   * If current user is speech creator, they see full details (including draft).
   * Otherwise, they see the public version (no draft).
   * @param data The data for the request.
   * @param data.speechId
   * @returns SecretSpeechVersionPublic Successful Response
   * @throws ApiError
   */
  public static listSpeechVersions(
    data: SpeechesListSpeechVersionsData,
  ): CancelablePromise<SpeechesListSpeechVersionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/speeches/{speech_id}/versions",
      path: {
        speech_id: data.speechId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Set Current Speech Version
   * Set a specific version of a speech as the current one.
   * User must be the creator of the speech.
   * @param data The data for the request.
   * @param data.speechId
   * @param data.versionId
   * @returns SecretSpeechPublic Successful Response
   * @throws ApiError
   */
  public static setCurrentSpeechVersion(
    data: SpeechesSetCurrentSpeechVersionData,
  ): CancelablePromise<SpeechesSetCurrentSpeechVersionResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/speeches/{speech_id}/versions/{version_id}/set-current",
      path: {
        speech_id: data.speechId,
        version_id: data.versionId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UsersService {
  /**
   * Read Users
   * Retrieve users.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns UsersPublic Successful Response
   * @throws ApiError
   */
  public static readUsers(
    data: UsersReadUsersData = {},
  ): CancelablePromise<UsersReadUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/users/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create User
   * Create new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: UsersCreateUserData,
  ): CancelablePromise<UsersCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User Me
   * Get current user.
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/users/me",
    })
  }

  /**
   * Delete User Me
   * Delete own user.
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/users/me",
    })
  }

  /**
   * Update User Me
   * Update own user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserMe(
    data: UsersUpdateUserMeData,
  ): CancelablePromise<UsersUpdateUserMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/users/me",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Password Me
   * Update own password.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static updatePasswordMe(
    data: UsersUpdatePasswordMeData,
  ): CancelablePromise<UsersUpdatePasswordMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/users/me/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Register User
   * Create new user without the need to be logged in.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static registerUser(
    data: UsersRegisterUserData,
  ): CancelablePromise<UsersRegisterUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User By Id
   * Get a specific user by id.
   * @param data The data for the request.
   * @param data.userId
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserById(
    data: UsersReadUserByIdData,
  ): CancelablePromise<UsersReadUserByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User
   * Update a user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUser(
    data: UsersUpdateUserData,
  ): CancelablePromise<UsersUpdateUserResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User
   * Delete a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUser(
    data: UsersDeleteUserData,
  ): CancelablePromise<UsersDeleteUserResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UtilsService {
  /**
   * Test Email
   * Test emails.
   * @param data The data for the request.
   * @param data.emailTo
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static testEmail(
    data: UtilsTestEmailData,
  ): CancelablePromise<UtilsTestEmailResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/utils/utils/test-email/",
      query: {
        email_to: data.emailTo,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Health Check
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/utils/health-check/",
    })
  }
}
