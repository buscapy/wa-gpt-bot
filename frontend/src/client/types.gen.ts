// This file is auto-generated by @hey-api/openapi-ts

export type Body_events_add_event_participant = {
  user_id_to_add: string
  role?: string
}

export type Body_login_login_access_token = {
  grant_type?: string | null
  username: string
  password: string
  scope?: string
  client_id?: string | null
  client_secret?: string | null
}

export type CoordinationEventCreate = {
  event_type: string
  event_name: string
  event_date: string
}

export type CoordinationEventPublic = {
  event_type: string
  event_name: string
  event_date: string
  id: string
  creator_id: string
  created_at: string
  updated_at: string
}

export type EventParticipantPublic = {
  user_id: string
  event_id: string
  role: string
  added_at: string
}

export type HTTPValidationError = {
  detail?: Array<ValidationError>
}

export type ItemCreate = {
  title: string
  description?: string | null
}

export type ItemPublic = {
  title: string
  description?: string | null
  id: string
  owner_id: string
}

export type ItemsPublic = {
  data: Array<ItemPublic>
  count: number
}

export type ItemUpdate = {
  title?: string | null
  description?: string | null
}

export type Message = {
  message: string
}

export type NewPassword = {
  token: string
  new_password: string
}

export type PersonalizedNudgePublic = {
  nudge_type: string
  message: string
  severity: string
}

export type PrivateUserCreate = {
  email: string
  password: string
  full_name: string
  is_verified?: boolean
}

export type SecretSpeechPublic = {
  id: string
  event_id: string
  creator_id: string
  current_version_id: string | null
  created_at: string
  updated_at: string
}

export type SecretSpeechVersionCreate = {
  speech_draft: string
  speech_tone: string
  estimated_duration_minutes: number
}

export type SecretSpeechVersionPublic = {
  id: string
  speech_id: string
  version_number: number
  speech_tone: string
  estimated_duration_minutes: number
  created_at: string
  creator_id: string
}

export type SecretSpeechWithInitialVersionCreate = {
  event_id: string
  initial_speech_draft: string
  initial_speech_tone?: string
  initial_estimated_duration_minutes?: number
}

export type Token = {
  access_token: string
  token_type?: string
}

export type UpdatePassword = {
  current_password: string
  new_password: string
}

export type UserCreate = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  password: string
}

export type UserPublic = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  id: string
}

export type UserRegister = {
  email: string
  password: string
  full_name?: string | null
}

export type UsersPublic = {
  data: Array<UserPublic>
  count: number
}

export type UserUpdate = {
  email?: string | null
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  password?: string | null
}

export type UserUpdateMe = {
  full_name?: string | null
  email?: string | null
}

export type ValidationError = {
  loc: Array<string | number>
  msg: string
  type: string
}

export type EventsListUserEventsResponse = Array<CoordinationEventPublic>

export type EventsCreateEventData = {
  requestBody: CoordinationEventCreate
}

export type EventsCreateEventResponse = CoordinationEventPublic

export type EventsGetEventDetailsData = {
  eventId: string
}

export type EventsGetEventDetailsResponse = CoordinationEventPublic

export type EventsAddEventParticipantData = {
  eventId: string
  requestBody: Body_events_add_event_participant
}

export type EventsAddEventParticipantResponse = EventParticipantPublic

export type EventsListEventParticipantsData = {
  eventId: string
}

export type EventsListEventParticipantsResponse = Array<UserPublic>

export type EventsRemoveEventParticipantData = {
  eventId: string
  userIdToRemove: string
}

export type EventsRemoveEventParticipantResponse = Message

export type EventsGetEventSpeechAnalysisData = {
  eventId: string
}

export type EventsGetEventSpeechAnalysisResponse =
  Array<PersonalizedNudgePublic>

export type ItemsReadItemsData = {
  limit?: number
  skip?: number
}

export type ItemsReadItemsResponse = ItemsPublic

export type ItemsCreateItemData = {
  requestBody: ItemCreate
}

export type ItemsCreateItemResponse = ItemPublic

export type ItemsReadItemData = {
  id: string
}

export type ItemsReadItemResponse = ItemPublic

export type ItemsUpdateItemData = {
  id: string
  requestBody: ItemUpdate
}

export type ItemsUpdateItemResponse = ItemPublic

export type ItemsDeleteItemData = {
  id: string
}

export type ItemsDeleteItemResponse = Message

export type LoginLoginAccessTokenData = {
  formData: Body_login_login_access_token
}

export type LoginLoginAccessTokenResponse = Token

export type LoginTestTokenResponse = UserPublic

export type LoginRecoverPasswordData = {
  email: string
}

export type LoginRecoverPasswordResponse = Message

export type LoginResetPasswordData = {
  requestBody: NewPassword
}

export type LoginResetPasswordResponse = Message

export type LoginRecoverPasswordHtmlContentData = {
  email: string
}

export type LoginRecoverPasswordHtmlContentResponse = string

export type PrivateCreateUserData = {
  requestBody: PrivateUserCreate
}

export type PrivateCreateUserResponse = UserPublic

export type SpeechesCreateSpeechData = {
  requestBody: SecretSpeechWithInitialVersionCreate
}

export type SpeechesCreateSpeechResponse = SecretSpeechPublic

export type SpeechesListEventSpeechesData = {
  eventId: string
}

export type SpeechesListEventSpeechesResponse = Array<SecretSpeechPublic>

export type SpeechesGetSpeechDetailsData = {
  speechId: string
}

export type SpeechesGetSpeechDetailsResponse = SecretSpeechPublic

export type SpeechesCreateSpeechVersionData = {
  requestBody: SecretSpeechVersionCreate
  speechId: string
}

export type SpeechesCreateSpeechVersionResponse = SecretSpeechVersionPublic

export type SpeechesListSpeechVersionsData = {
  speechId: string
}

export type SpeechesListSpeechVersionsResponse =
  Array<SecretSpeechVersionPublic>

export type SpeechesSetCurrentSpeechVersionData = {
  speechId: string
  versionId: string
}

export type SpeechesSetCurrentSpeechVersionResponse = SecretSpeechPublic

export type UsersReadUsersData = {
  limit?: number
  skip?: number
}

export type UsersReadUsersResponse = UsersPublic

export type UsersCreateUserData = {
  requestBody: UserCreate
}

export type UsersCreateUserResponse = UserPublic

export type UsersReadUserMeResponse = UserPublic

export type UsersDeleteUserMeResponse = Message

export type UsersUpdateUserMeData = {
  requestBody: UserUpdateMe
}

export type UsersUpdateUserMeResponse = UserPublic

export type UsersUpdatePasswordMeData = {
  requestBody: UpdatePassword
}

export type UsersUpdatePasswordMeResponse = Message

export type UsersRegisterUserData = {
  requestBody: UserRegister
}

export type UsersRegisterUserResponse = UserPublic

export type UsersReadUserByIdData = {
  userId: string
}

export type UsersReadUserByIdResponse = UserPublic

export type UsersUpdateUserData = {
  requestBody: UserUpdate
  userId: string
}

export type UsersUpdateUserResponse = UserPublic

export type UsersDeleteUserData = {
  userId: string
}

export type UsersDeleteUserResponse = Message

export type UtilsTestEmailData = {
  emailTo: string
}

export type UtilsTestEmailResponse = Message

export type UtilsHealthCheckResponse = boolean
